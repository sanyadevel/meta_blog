{"ast":null,"code":"import { validationRules } from '../logics/validationRules';\nexport const useValidation = formMethods => {\n  const {\n    setError,\n    clearErrors\n  } = formMethods;\n  const validateField = (name, value) => {\n    if (!validationRules[name].validate(value)) {\n      setError(name, {\n        type: 'manual',\n        message: validationRules[name].errorMessage\n      });\n    } else {\n      clearErrors(name);\n    }\n  };\n  return {\n    ...formMethods,\n    validateField\n  };\n};","map":{"version":3,"names":["validationRules","useValidation","formMethods","setError","clearErrors","validateField","name","value","validate","type","message","errorMessage"],"sources":["/Users/sanyadev/blog_app/src/hooks/useValidation.ts"],"sourcesContent":["import { UseFormReturn } from 'react-hook-form';\n\nimport { validationRules } from '../logics/validationRules';\n\nexport const useValidation = (formMethods: UseFormReturn<any | undefined>) => {\n  const { setError, clearErrors } = formMethods;\n\n  const validateField = (name: string, value: string) => {\n    if (!validationRules[name].validate(value)) {\n      setError(name, {\n        type: 'manual',\n        message: validationRules[name].errorMessage,\n      });\n    } else {\n      clearErrors(name);\n    }\n  };\n\n  return { ...formMethods, validateField };\n};\n"],"mappings":"AAEA,SAASA,eAAe,QAAQ,2BAA2B;AAE3D,OAAO,MAAMC,aAAa,GAAIC,WAA2C,IAAK;EAC5E,MAAM;IAAEC,QAAQ;IAAEC;EAAY,CAAC,GAAGF,WAAW;EAE7C,MAAMG,aAAa,GAAGA,CAACC,IAAY,EAAEC,KAAa,KAAK;IACrD,IAAI,CAACP,eAAe,CAACM,IAAI,CAAC,CAACE,QAAQ,CAACD,KAAK,CAAC,EAAE;MAC1CJ,QAAQ,CAACG,IAAI,EAAE;QACbG,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAEV,eAAe,CAACM,IAAI,CAAC,CAACK;MACjC,CAAC,CAAC;IACJ,CAAC,MAAM;MACLP,WAAW,CAACE,IAAI,CAAC;IACnB;EACF,CAAC;EAED,OAAO;IAAE,GAAGJ,WAAW;IAAEG;EAAc,CAAC;AAC1C,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}