"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extractCssChunksWebpackPlugin = _interopRequireDefault(require("extract-css-chunks-webpack-plugin"));

var _autoprefixer = _interopRequireDefault(require("autoprefixer"));

var _postcssFlexbugsFixes = _interopRequireDefault(require("postcss-flexbugs-fixes"));

var _semver = _interopRequireDefault(require("semver"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var _default = function _default(_ref) {
  var _ref$includePaths = _ref.includePaths,
      includePaths = _ref$includePaths === void 0 ? [] : _ref$includePaths,
      _ref$cssLoaderOptions = _ref.cssLoaderOptions,
      cssLoaderOptions = _ref$cssLoaderOptions === void 0 ? {} : _ref$cssLoaderOptions,
      rest = _objectWithoutProperties(_ref, ["includePaths", "cssLoaderOptions"]);

  return {
    webpack: function webpack(config, _ref2) {
      var stage = _ref2.stage;
      var loaders = [];

      var sassLoaderPath = require.resolve('sass-loader');

      var sassLoader = {
        loader: sassLoaderPath,
        options: {
          sassOptions: _objectSpread({
            includePaths: ['src/'].concat(_toConsumableArray(includePaths))
          }, rest)
        }
      };
      var cssLoader = {
        loader: 'css-loader',
        options: _objectSpread({
          importLoaders: 1,
          sourceMap: false
        }, cssLoaderOptions)
      };
      var postCssLoader = {
        loader: 'postcss-loader',
        options: {
          sourceMap: true,
          ident: 'postcss',
          plugins: function plugins() {
            return [_postcssFlexbugsFixes["default"], (0, _autoprefixer["default"])({
              flexbox: 'no-2009'
            })];
          }
        }
      };

      if (stage === 'dev') {
        // Dev
        loaders = [{
          loader: _extractCssChunksWebpackPlugin["default"].loader,
          options: {
            hmr: true
          }
        }, cssLoader, postCssLoader, sassLoader];
      } else if (stage === 'node') {
        // Node
        // Don't extract css to file during node build process
        loaders = [cssLoader, postCssLoader, sassLoader];
      } else {
        // Prod
        // for legacy css-loader version (<2.0) we need to add "minimize" to minify css code
        // for >2.0 it is handled with https://github.com/NMFR/optimize-css-assets-webpack-plugin
        var cssLoaderVersion = require('css-loader/package.json').version;

        if (_semver["default"].satisfies(cssLoaderVersion, '<2') === true) {
          cssLoader.options.minimize = true;
        }

        loaders = [_extractCssChunksWebpackPlugin["default"].loader, cssLoader, postCssLoader, sassLoader];
      }

      config.module.rules[0].oneOf.unshift({
        test: /\.s(a|c)ss$/,
        use: loaders
      });

      if (config.optimization.splitChunks && config.optimization.splitChunks && config.optimization.splitChunks.cacheGroups.styles) {
        config.optimization.splitChunks.cacheGroups.styles.test = /\.(c|sc|sa)ss$/;
      }

      return config;
    }
  };
};

exports["default"] = _default;